@import 'helpingMixins';
@import '../utilities/globals';

div {
    @include centerer;

    .fancy {
        @include fancy-centerer;
    }
}

/* Remember how we made the link color mixin?  What if we combine it with this? */

@include linx($link, $visit, $hover, $active);

/* That was cool, but let's try something a little different... */
/* Let's define our own colors, secure in the knowledge that our mixin will take four arguments */
/* We can name them whatever here, as long as the number matches.
   They will take the name in the mixin definition.
*/

$one: "#00ff00";
$two: "#0fa000";
$three: "#0F1E71";
$four: "#BB7737";


@include linx($one, $two, $three, $four);

/* A good use case for mixins... */

.tab-button {
     @include rounded-corner(5px);
}

.cta-button {
     @include rounded-corner(8px);
}

/* Remember that bad one? Let's try this: */
%btn {
    padding: 10px;
    color:#fff;
    cursor: pointer;
    border: none;
    shadow: none;
    font-size: 14px;
    width: 150px;
    margin: 5px 0;
    text-align: center;
    display: block;
}

.cta-btn-better {
    @include btn-background(green);
}

.main-btn-better {
    @include btn-background(orange);
}

.info-btn-better {
    @include btn-background(blue);
}

/* We took the non-dynamic stuff and shoved it in a placeholder.
   Then, we made a mixin that used that placeholder with some dynamic input.
   Not bad, right?
*/

/*Speaking of not repeating ourselves, we can make functions. Here's one for Math(s) */

@function calculate-width ($col-span) {
    @return 100% / $col-span
}

.span-two {
    width: calculate-width(2); // spans 2 columns, width = 50%
}

.span-three {
    width: calculate-width(3); // spans 3 columns, width = 33.3%
}
